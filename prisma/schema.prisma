// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EVENT_TYPE {
  APPOINTMENT
  BOOTCAMP
  WORKOUT
}

model Appointment {
  createdAt            DateTime           @default(now())
  date                 DateTime
  deleted              Boolean            @default(false)
  description          String?
  fee                  Int                @default(0)
  googleCalendarEventId String?
  id                   String             @id @default(uuid())
  name                 String
  owner                User               @relation(fields: [ownerId], references: [id])
  ownerId              String
  startTime            DateTime?
  endTime              DateTime?
  status               APPOINTMENT_STATUS @default(NOT_ATTENDED)
  updatedAt            DateTime           @updatedAt
  type                 EVENT_TYPE         @default(APPOINTMENT)
  videoUrl             String?
}

enum APPOINTMENT_STATUS {
  NOT_ATTENDED
  ATTENDED
}

model Bootcamp {
  attendees   User[]
  createdAt   DateTime   @default(now())
  date        DateTime
  deleted     Boolean    @default(false)
  description String?
  id          String     @id @default(uuid())
  name        String
  updatedAt   DateTime   @updatedAt
  type        EVENT_TYPE @default(BOOTCAMP)
  videoUrl    String?
}

model Invoice {
  appointments Int
  createdAt    DateTime @default(now())
  date         DateTime
  deleted      Boolean  @default(false)
  id           String   @id @default(uuid())
  owner        User     @relation(fields: [ownerId], references: [id])
  ownerId      String
  total        Int
  updatedAt    DateTime @updatedAt
}

model User {
  appointments Appointment[]
  billingEmail String?
  bootcamps    Bootcamp[]
  createdAt    DateTime      @default(now())
  credits      Int           @default(0)
  fee          Int           @default(0)
  invoices     Invoice[]
  type         USER_TYPE     @default(INDIVIDUAL)
  updatedAt    DateTime      @updatedAt
  workouts     Workout[]

  password         String?
  resetToken       String?
  resetTokenExpiry DateTime?

  // Fields required by NextAuth.js
  accounts      Account[]
  email         String    @unique
  emailVerified DateTime?
  id            String    @id @default(uuid())
  image         String?
  name          String
  role          String    @default("user")
  sessions      Session[]
}

enum USER_TYPE {
  INDIVIDUAL
  BOOTCAMP
}

model Workout {
  createdAt   DateTime       @default(now())
  date        DateTime
  deleted     Boolean        @default(false)
  description String?
  id          String         @id @default(uuid())
  name        String
  owner       User           @relation(fields: [ownerId], references: [id])
  ownerId     String
  status      WORKOUT_STATUS @default(NOT_STARTED)
  updatedAt   DateTime       @updatedAt
  type        EVENT_TYPE     @default(WORKOUT)
  videoUrl    String?
}

enum WORKOUT_STATUS {
  NOT_STARTED
  COMPLETED
}

// NextAuth.js models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
